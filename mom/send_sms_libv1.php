<?phprequire_once('lib/commonFunc.php');$mode = filter_input(INPUT_POST,'mode');$userid = strtolower($_SESSION['userid']);$dept = $_SESSION['department'];$ctype = filter_input(INPUT_POST,'contacttype');$sendtype = filter_input(INPUT_POST,'sendtype');$RadioType = filter_input(INPUT_POST,'RadioType');$x = GetLanguage("file_upload_status",$lang);//error_log("edwin mode:".$mode);//$mode = "listContacts";//for test//$ctype = "sms";//for testswitch ($mode) {		case "findTplParamElement":		listTplParamElement(										filter_input(INPUT_POST,'tpl_id')										);		break;	case "listContacts":		listContacts($userid, $ctype);		break;	case "listGroup":		listGroup($userid, $ctype);		break;	case "listGlobalContacts":		listGlobalContacts($userid, $dept, $ctype,$RadioType);		break;	case "listGlobalGroup":		listGlobalGroup($userid, $dept, $ctype,$sendtype);		break;	case "listTemplate":		listTemplate($userid);		break;	case "listGlobalTemplate":		listGlobalTemplate($userid, $dept);		break;	case "listMIMTemplate":		listMIMTemplate($userid);		break;	case "sendSMS":		sendSMS(				$userid, 				$dept, 				filter_input(INPUT_POST,'mobile'),				filter_input(INPUT_POST,'email'),				filter_input(INPUT_POST,'eml_fr'),				filter_input(INPUT_POST,'eml_subj'),				filter_input(INPUT_POST,'smstext'),				filter_input(INPUT_POST,'count_chars',FILTER_SANITIZE_NUMBER_INT),				filter_input(INPUT_POST,'charset'),				filter_input(INPUT_POST,'sendtype'),				filter_input(INPUT_POST,'priority',FILTER_SANITIZE_NUMBER_INT),				filter_input(INPUT_POST,'campaign_id',FILTER_SANITIZE_NUMBER_INT),				filter_input(INPUT_POST,'sendmode'),				filter_input(INPUT_POST,'bot_id'),				filter_input(INPUT_POST,'tpl_type'),				filter_input(INPUT_POST,'tpl_id'),				filter_input(INPUT_POST,'mim_params')				);		break;	case "sendScheduledSMS":		sendScheduledSMS(						$userid, 						$dept, 						filter_input(INPUT_POST,'mobile'),						filter_input(INPUT_POST,'email'),						filter_input(INPUT_POST,'eml_fr'),						filter_input(INPUT_POST,'eml_subj'),						filter_input(INPUT_POST,'smstext'), 						filter_input(INPUT_POST,'count_chars',FILTER_SANITIZE_NUMBER_INT), 						filter_input(INPUT_POST,'charset'),						filter_input(INPUT_POST,'sendtype'), 						filter_input(INPUT_POST,'priority',FILTER_SANITIZE_NUMBER_INT), 						$_POST['sms_date']." ".$_POST['sms_hour'].":".$_POST['sms_min'],						filter_input(INPUT_POST,'sendmode'),						filter_input(INPUT_POST,'campaign_id',FILTER_SANITIZE_NUMBER_INT)						);		break;    default:        die('Invalid Command');}function sendSMS($userid, $department, $mobile_list, $email_list, $email_from, $email_subj, $sms_text, $total_length, $mode, $sendtype, $priority, $campaign_id, $sendmode, $bot_id, $tpl_type, $tpl_id, $mim_params ){	global $dbconn, $lang;		$email_body = $sms_text;	$msgstr = GetLanguage("lib_send_sms",$lang);	$sendSMS_msg1 = (string)$msgstr->sendSMS_msg1;	$sendSMS_msg2 = (string)$msgstr->sendSMS_msg2;	$msg_from = $userid. " (" .$_SERVER['REMOTE_ADDR']. ")";	$sms_text = urldecode(trim($sms_text));	$email_body = urldecode(trim($email_body));	$label = getLabel($department);		if( $tpl_type == "mim_msg_template" ){				$split1 = explode( "@@", $mim_params );				foreach( $split1 as $key => $value ){						$split2 = explode( "==", $value );						$ParamName = "<" . $split2[0] . ">";			$ParamValue = $split2[1];						$sms_text = str_replace( $ParamName, $ParamValue ,$sms_text );					}			}		if($mode == "text") {		$sms_length = strlen($sms_text);	} else {		$sms_length = mb_strlen($sms_text,'UTF-8');	}		/*	if($sms_length > $total_length) {		$sms_text = substr($sms_text, 0, $total_length);	}	*/		$mobile_arr = explode("\n", stripslashes(trim($mobile_list)));	$result = processSendSMS($userid, $department,$mode, $mobile_arr, $sms_text, $msg_from, $label,$priority, $msgstr, $campaign_id);	$sent_sms = $result[0];	$error = $result[1];	$quota_msg = $result[2];	//error_log("sendtype:".$sendtype);	$email_result = array();	$eml_totsend =0;	$eml_unsend = 0;	$eml_comment = '';		if($sendtype == 'both'){		$email_arr = explode("\n", stripslashes(trim($email_list)));		//error_log("emailcount:".empty($email_arr)." ".json_encode($email_arr));		if(!empty($email_arr)){			$email_result = processSendEmail($userid, $department,$mode, $email_arr, $email_from, $email_subj, $email_body);		}				$eml_totsend = $email_result[0];		$eml_unsend	 = $email_result[1];		$eml_comment = $email_result[2];				if($eml_unsend > 0){			$error = 1;		}	}		if($sendtype == 'sms_mim'){				//get bot details		$bot = getBotDetails( $bot_id );		$bot_datas = getBotByBotID( $bot_id );				if( $bot_datas['bot_type_id'] == 13 ){//whatsapp DC						//$datas['id'] = "9a0c4170-7df7-11ea-be07-37d0c4a38c05";//IO campaign_id			//$datas['secret'] = "tHB8xekevPPdnFRMXeqr73rHUgZp0JMt";//IO Campaign Secret			$datas['id'] = $bot['campaignId'];//IO campaign_id			$datas['secret'] = $bot['campaignSecret'];//IO Campaign Secret						$datas['message'] = $sms_text;			$datas['subscribers'] = explode("\n", stripslashes(trim($mobile_list)));						$datas = json_encode($datas);						$WDC_result = SendMsgViaWhatsappDC( $datas, $bot['campaignAccessToken'] );			if( $WDC_result['status'] == "error" ){				$error = 1;			}				}			}		$val = array();	if($error > 0) {		$val['output'] = $error. $sendSMS_msg2.(!empty($quota_msg)?"<br>".$quota_msg:"");		if($sendtype == 'both') {			if($eml_unsend > 0) {				$val['output'] .= "<br>".$eml_unsend." Email doesn't send. Error:".$eml_comment;			}			if($eml_totsend > 0){				$val['output'] .= "<br>".$eml_totsend." Email Successfully Sent. ";			}		}elseif( $sendtype == 'sms_mim' ){						if( $WDC_result['status'] == "error" ){				$val['output'] .= "<br>Failed send MIM.";			}else{				$val['output'] .= "<br>MIM successfully sent.";			}					}				$val['error'] = "1";	} else {		$msgstr2 = GetLanguage("send_sms",$lang);		$val['output'] = $sent_sms." ".$msgstr2->alert_7;		if($sendtype == 'both') {			$val['output'] .= "<br>".$eml_totsend." Email Successfully Sent. ";		}elseif( $sendtype == 'sms_mim' ){						if( $WDC_result['status'] == "error" ){				$val['output'] .= "<br>Failed send MIM.";			}else{				$val['output'] .= "<br>MIM successfully sent.";			}					}				$val['error'] = "0";	}	echo json_encode($val);}function getBotDetails( $bot_id ){		global $spdbconn;		$sqlcmd = "select a.bot_api_parameter_id, a.parameter_value, b.parameter from bot_api_configs a, bot_api_parameters b where a.bot_api_parameter_id = b.id and a.bot_id = '$bot_id'";		$row = getSQLresult($spdbconn, $sqlcmd);	foreach( $row as $key => $settings ){		$returns[ $settings["parameter"] ] = $settings["parameter_value"];	}		return $returns;	}function getBotByBotID( $bot_id ){		global $spdbconn;		$sqlcmd = "select * from bot_route where id = '$bot_id'";		$row = getSQLresult($spdbconn, $sqlcmd);		return $row[0];	}function SendMsgViaWhatsappDC( $datas, $campaignAccessToken ){		$url = "https://api.sendquick.io/channel-subscribers/send";	$curl = curl_init();	curl_setopt($curl, CURLOPT_POST, 1);	curl_setopt($curl, CURLOPT_POSTFIELDS, $datas);	curl_setopt($curl, CURLOPT_URL, $url);	curl_setopt($curl, CURLOPT_HTTPHEADER, array(		//'Authorization: 7wMVLp35hSQfhnscfwrID554OXwAbMiURhqJ8CTUMcUvfZFY34VppZwB1Ob9MEvo',//IO Campaign Access Token		'Authorization: ' . $campaignAccessToken,//IO Campaign Access Token		'Content-Type: application/json',	));	curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);	curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);	$api_result = curl_exec($curl);	//$api_result2 = json_encode($api_result);	$api_result3 = json_decode($api_result);		if(  isset($api_result3->data->broadcastId) ){				$returns["status"] = "sent";		$returns["broadcastId"] = ( $api_result3->data->broadcastId ? $api_result3->data->broadcastId : "" );			}else{				$returns["status"] = "error";		$returns["code"] = ( $api_result3->error->statusCode ? $api_result3->error->statusCode : "" );		$returns["message"] = ( $api_result3->error->message ? $api_result3->error->message : "" );		//echo "fail";	}	//die;	return $returns;}function processSendSMS($userid, $department,$mode, $mobile_arr, $sms_text, $msg_from, $label,$priority, $msgstr, $campaign_id){	global $dbconn, $lang;		if(empty($priority)) { $priority = "5";}		$sendSMS_msg1 = (string)$msgstr->sendSMS_msg1;	$quota_msg="";	$unsub = "";		$error = 0;	$sent_sms = 0;	$pattern = "/^\+?\d+$/";		for($a=0; $a<count($mobile_arr); $a++) {		$tmp_arr = explode("(", $mobile_arr[$a]);		$mobile_numb = trim($tmp_arr[0]);		if(strlen($mobile_numb) != 0) {			if(preg_match($pattern, $mobile_numb)) {				$match = checkUnsubMobile($mobile_numb);				if($match){					if($unsub != "") {						$unsub .= ", ".$mobile_numb;					} else {						$unsub = $mobile_numb;					}					continue;				}								$mobile_numb_check = validateMno($mobile_numb);						if( $mobile_numb_check != "-1" ){										$mobile_numb = $mobile_numb_check;//replace										$t = getSQLresult($dbconn, "select nextval('message_trackid') as trackid");					$trackid = $_SESSION['server_prefix'].date('His').$t[0]['trackid'];					//Check Quota					$check_quota_type = checkQuotaType($_SESSION['userid'], $dbconn);					$check_unlimited_quota = checkQuotaUnlimited($_SESSION['userid'], $dbconn);					$check_quota = 0;					$ReservedQuota = checkReservedQuota( $_SESSION['userid'],$dbconn );										if($check_unlimited_quota != 1) {						$check_quota = checkQuota($_SESSION['userid'], $dbconn);						if( ( $check_quota == 0 ) || ( ( $check_quota - $ReservedQuota ) <  1 ) ){							$quota_msg = $sendSMS_msg1;							//$error++;						} else {							$new_quota = $check_quota - 1;							$sql = "update quota_mnt set quota_left='".$new_quota."' where userid='". $_SESSION['userid']."'";							$result = doSQLcmd($dbconn,$sql);														if(!$result){								//$error++;								error_log($sqlcmd . ' -- ' .pg_last_error($dbconn));							}						}					}					if( $check_quota > 0 || $check_unlimited_quota == 1){						$sms_text_escape = pg_escape_literal($sms_text);						$sms_text_insert = preg_replace('/\n/','<br>',$sms_text_escape);												$outgoing_id = getSequenceID($dbconn,'outgoing_logs_outgoing_id_seq');						$sqlcmd = "insert into outgoing_logs (outgoing_id,priority,trackid,sent_by,department,mobile_numb,message,message_status,modem_label, campaign_id )									values ('".$outgoing_id."','".$priority."','".$trackid."','".pg_escape_string($userid)."','".pg_escape_string($department)."','".$mobile_numb."',{$sms_text_insert},'P','".$label."', '".$campaign_id."')";						$row = doSQLcmd($dbconn, $sqlcmd);					} else {						$row = 0;						$error++;					}					if($row > 0) {						$response = internal_post($mobile_numb, $sms_text_escape, $mode, $priority, $msg_from, $trackid, $label, $campaign_id);												if(empty($response)) {							$updatesql = "update outgoing_logs set message_status='F',completed_dtm='now()' where trackid='".dbSafe($trackid)."'";							$update = doSQLcmd($dbconn, $updatesql);							$error++;						} else {							$sent_sms++;						}					}									}							}		}	}		return array($sent_sms, $error, $quota_msg);}function processSendEmail($userid, $department,$mode, $email_arr, $email_from, $email_subj, $body){		require('lib/class.smtp.php');	require('lib/class.phpmailer.php');		global $dbconn;	global $spdbconn;		$cmd = "select host,port,auth,type,username,password 			from smtp_route where idx='1'";	$res = pg_query($spdbconn, $cmd);	$row = pg_fetch_row($res);	$totalsend = 0;	$totalunsent = 0;		if($email_from == ''){		$email_from = "system@smsgateway.com";	}	if($email_subj == ''){		$email_subj = "From SMS Gateway";	}	$comment = '';	for($a=0; $a<count($email_arr); $a++) {				$fields = "sent_by, department, email_from, email_subj, body, completed_dtm, email_id, email, status, comment";		$cols = "'$userid', '$department', '".dbSafe($email_from)."', '".dbSafe($email_subj)."', '".dbSafe($body)."'";			$tmp_arr = explode("(", $email_arr[$a]);		$to_email = trim($tmp_arr[0]);				//reset from start to make it each email sent individual and can not see other receiver		$mail = new PHPMailer();		$mail->IsSMTP();		$mail->CharSet = 'UTF-8';		$mail->Timeout = 10;		//$mail->Host = trim($row[0]);		//$mail->Port = trim($row[1]);		$mail->Host = "localhost";		$mail->Port = 25;				/*		if (trim($row[2]) == "t") {			$mail->SMTPAuth = true;			$mail->Username = trim($row[4]);			$mail->Password = trim($row[5]);			if (!empty($row[2])) { 				$mail->SMTPSecure = strtolower($row[3]);			}		}		*/				$mail->From     = $email_from;		$mail->Subject  = $email_subj;		$mail->Body     = $body;				$mail->SMTPOptions = array(			'ssl' => array(				'verify_peer' => false,				'verify_peer_name' => false,				'allow_self_signed' => true				)		);				$mail->AddAddress($to_email);				$email_id = getSequenceID($dbconn,'outgoing_logs_outgoing_id_seq');		//$date = date('Y-m-d H:i:s');		$cols .= ", 'now()', '$email_id','".dbSafe($to_email)."'";		if(!$mail->Send()) {			$comment = @$mail->ErrorInfo;			error_log("Fail to send: ".$to_email." ".$comment);			$cols .= ", '0', '".dbSafe($comment)."'";			$totalunsent++;		} else {			$totalsend++;			$cols .= ", '1', '".dbSafe($comment)."'";		}				//error_log( "sqlcmd: " . $sqlcmd . "\n\n\n" );				$sqlcmd = "insert into email_logs (".$fields.") values (".$cols.")";		if(!doSQLcmd($dbconn, $sqlcmd)){			error_log("FAIL:".$sqlcmd);		}	}		return array($totalsend, $totalunsent, $comment);}function internal_post($mobile_numb, $msg_content, $mode, $priority, $msg_from, $trackid, $label, $campaign_id){	global $dbconn;  	$sqlcmd = "INSERT INTO webapp_sms (msgid, mobile_numb, msg_content, mode, priority, msg_from, msg_status, label, campaign_id )				VALUES ('$trackid', '$mobile_numb', {$msg_content}, '$mode', '$priority', '$msg_from', 'W','$label', '$campaign_id') ";	$result = pg_query($dbconn, $sqlcmd);		if(!$result) {		error_log("Database Error (" .$sqlcmd. ") -- ".pg_last_error($dbconn));		return 0;	} else {		return pg_affected_rows($result);	}}function sendScheduledSMS($userid,$department,$mobile_list,$email_list, $email_from, $email_subj,$sms_text,$total_length,$mode,$sendtype, $priority_mode,$scheduled_time, $sendmode, $campaign_id){	global $dbconn, $lang;	$msgstr = GetLanguage("lib_send_sms",$lang);	$sendSMS_msg1 = (string)$msgstr->sendSMS_msg1;	$sendScheduledSMS_msg1 = (string)$msgstr->sendScheduledSMS_msg1;	$msg_from = $userid." (" .$_SERVER['REMOTE_ADDR']. ")";	$sms_text = urldecode(trim($sms_text));	$label = getLabel($department);		if($mode == "text") {		$sms_length = strlen($sms_text);	} else {		$sms_length = mb_strlen($sms_text,'UTF-8');	}	if($sms_length > $total_length) {		$sms_text = substr($sms_text, 0, $total_length);	}	if(empty($priority_mode)) {		$priority_mode = "5";	}	$error = 0;	$queue_sms = 0;	$pattern = "/^\+?\d+$/";		$mobile_arr = explode("\n", stripslashes(trim($mobile_list)));	$quota_msg = '';	$unsub = "";	for($a=0; $a<count($mobile_arr); $a++) {		$tmp_arr = explode("(", $mobile_arr[$a]);		$mobile_numb = trim($tmp_arr[0]);		if(strlen($mobile_numb) != 0) {			if(preg_match($pattern, $mobile_numb)) {				$match = checkUnsubMobile($mobile_numb);				if($match){					if($unsub != "") {						$unsub .= ", ".$mobile_numb;					} else {						$unsub = $mobile_numb;					}					continue;				}				$t = getSQLresult($dbconn, "select nextval('message_trackid') as trackid");				$trackid = $_SESSION['server_prefix'].date('His').$t[0]['trackid'];				//Check Quota				$check_quota_type = checkQuotaType($_SESSION['userid'], $dbconn);				$check_unlimited_quota = checkQuotaUnlimited($_SESSION['userid'], $dbconn);				$check_quota = 0;				$ReservedQuota = checkReservedQuota( $_SESSION['userid'],$dbconn );								if($check_unlimited_quota != 1) {					$check_quota = checkQuota($_SESSION['userid'], $dbconn);					if( ( $check_quota == 0 ) || ( ( $check_quota - $ReservedQuota ) < 1 ) ){				 		$quota_msg = $sendSMS_msg1; //You don't have enough quota to send sms					} else {						$new_quota = $check_quota - 1;						$sql = "update quota_mnt set quota_left='".$new_quota."' where userid = '".$_SESSION['userid']."'";						$result = doSQLcmd($dbconn,$sql);			  			if( !$result ){							error_log($sqlcmd . ' -- ' .pg_last_error($dbconn));       					}					}				}				if( $check_quota > 0 || $check_unlimited_quota == 1){					$sms_text_escape = pg_escape_literal($sms_text);					$sms_text_insert = preg_replace('/\n/','<br>',$sms_text_escape);										$scheduled_id = getSequenceID($dbconn,'scheduled_sms_scheduled_id_seq');					$sqlcmd = "insert into scheduled_sms (scheduled_id,trackid,department,mobile_numb,message,priority_status,character_set,sent_by,scheduled_time,created_by,modem_label, campaign_id) 								values ('".pg_escape_string($scheduled_id)."','"										  .pg_escape_string($trackid). "','"										  .pg_escape_string($department). "','"										  .pg_escape_string($mobile_numb). "',{$sms_text_insert},'"										  .pg_escape_string($priority_mode). "','"										  .pg_escape_string($mode)."','"										  .pg_escape_string($msg_from)."',to_timestamp('"										  .pg_escape_string($scheduled_time)."','DD-MM-YYYY HH24:MI'),'"										  .pg_escape_string($userid)."','".$label."', '".$campaign_id."');";					$result = pg_query($dbconn, $sqlcmd);										if(!$result) {						$error++;						error_log($sqlcmd . ' -- ' . pg_last_error($dbconn));					} else {						if(pg_affected_rows($result) > 0) {							$queue_sms++;						}					}				} else {					$error++;				}			}		}	}	$val = array();	if($error > 0) {		$val['output'] = $error. $sendScheduledSMS_msg1.(!empty($quota_msg)?"<br>".$quota_msg:"");		$val['error'] = "1";	} else {		$msgstr2 = GetLanguage("send_sms",$lang);		$val['output'] = $queue_sms." ".$msgstr2->alert_8;		$val['error'] = "0";	}	echo json_encode($val);}function listContacts($userid, $ctype){	global $dbconn, $lang;	$result_array = array();	$msgstr = GetLanguage("lib_send_sms",$lang);	$listContacts_msg1 = (string)$msgstr->listContacts_msg1;	$db_err = (string)$msgstr->db_err;	$sqlcmd = "select contact_id, contact_name, mobile_numb, email from address_book where created_by='".dbSafe($userid)."' and access_type='0' order by contact_name";	$result = pg_query($dbconn, $sqlcmd);		//echo $sqlcmd;	//die;		if(!$result) {		echo $db_err. " (" .$sqlcmd. ") -- " .pg_last_error($dbconn);	} else {				for ($i=1; $row = pg_fetch_array($result); $i++){						$checkbok = '<input type="checkbox" name="selected" value="'.$row['mobile_numb'].'('.htmlspecialchars($row['contact_name']).')">';			if($ctype == 'email'){				error_log("name:".$row['contact_name']." email:".$row['email']);				if(trim($row['email']) != ''){					$checkbok = '<input type="checkbox" name="selected" value="'.$row['email'].'('.htmlspecialchars($row['contact_name']).')">';				} else {					$checkbok = '<input type="checkbox" name="selected" disabled>';				}							}						array_push($result_array,Array(				$i,				htmlspecialchars($row['contact_name']),				htmlspecialchars($row['mobile_numb']),				htmlspecialchars($row['email']),				$checkbok			));		}		echo json_encode(Array("data"=>$result_array));	}}function listGlobalContacts($userid, $department,$ctype,$RadioType){	global $dbconn, $lang;	$result_array = array();	$msgstr = GetLanguage("lib_send_sms",$lang);	$listGlobalContacts_msg1 = (string)$msgstr->listGlobalContacts_msg1;	$db_err = (string)$msgstr->db_err;	$list_cond = "";	$select_cond = "";	if(isUserAdmin($userid)) {		$list_cond = "where access_type = '1'";		$select_cond = ",department_list.department as department from address_book left outer join department_list on (address_book.department = department_list.department_id)";	} else {		$list_cond = "where (department='".dbSafe($department)."' or department = '0') and access_type = '1'";		$select_cond = ",department from address_book";	}	$sqlcmd = " select contact_id, contact_name, mobile_numb, email" .$select_cond. " " .$list_cond. " order by contact_name";	$result = pg_query($dbconn, $sqlcmd);		if(!$result) {		echo $db_err. " (" .$sqlcmd. ") -- " .pg_last_error($dbconn);	} else {		for ($i=1; $row = pg_fetch_array($result); $i++){						if( strlen(trim($row['email'])) > 0 ){				$email_str = "|" . $row['email'] . "(" . htmlspecialchars($row['contact_name']) . ")";			}else{				$email_str = "";			}						$checkbox = '<input type="checkbox" name="selected" value="'.$row['mobile_numb'] . $email_str.'">';			if($ctype == 'email'){				if(trim($row['email']) != ''){					$checkbox = '<input type="checkbox" name="selected" value="'.$row['mobile_numb'] . $email_str.'">';				} else {										if( $RadioType == "EmailOnly" ){						$checkbox = "";					}else{						//$checkbox = '<input type="checkbox" name="selected" disabled>';						$checkbox = '<input type="checkbox" name="selected">';					}									}			}					array_push($result_array,Array(				$i,				htmlspecialchars($row['contact_name']),				htmlspecialchars($row['mobile_numb']),				htmlspecialchars($row['email']),				(empty($row['department'])?'All Departments':htmlspecialchars($row['department'])),				$checkbox			));		}		echo json_encode(Array("data"=>$result_array));	}}function listGroup($userid,$ctype){	global $dbconn, $lang;	$result_array = array();	$msgstr = GetLanguage("lib_send_sms",$lang);	$listGroup_msg1 = (string)$msgstr->listGroup_msg1;	$db_err = (string)$msgstr->db_err;	$sqlcmd = "select group_id, group_name from address_group_main where created_by='".dbSafe($userid)."' and access_type='0' order by group_name";	$result = pg_query($dbconn, $sqlcmd);	if(!$result) {		echo $db_err. " (" .dbSafe($sqlcmd). ") -- " .dbSafe(pg_last_error($dbconn));	} else {		for ($i=1; $row = pg_fetch_array($result); $i++){			$tmp_arr = array();			$tmp_arr2 = array();			$getsql = "select contact_name, mobile_numb,email from address_book where group_string like '%".dbSafe($row['group_id'])."%' and created_by='".dbSafe($userid)."' and access_type='0' order by contact_name";			$get = pg_query($dbconn, $getsql);			if(!is_string($get))			{				for ($j=0; $row2 = pg_fetch_array($get); $j++){					array_push($tmp_arr, trim($row2['contact_name']));					array_push($tmp_arr2, trim($row2['mobile_numb']).'('.$row2['contact_name'].')');				}			}			$list = implode(", ", $tmp_arr);			$list2 = implode(",", $tmp_arr2);			if($list == "") { $list = "------"; }			array_push($result_array,Array(				$i,				htmlspecialchars($row['group_name']),				htmlspecialchars($list),				'<input type="checkbox" name="selected" value="'.htmlspecialchars($list2).'">'			));		}		echo json_encode(Array("data"=>$result_array));	}}function listGlobalGroup($userid, $department,$ctype,$sendtype){	global $dbconn, $lang;	$result_array = array();	$msgstr = GetLanguage("lib_send_sms",$lang);	$listGlobalGroup_msg1 = (string)$msgstr->listGlobalGroup_msg1;	$db_err = (string)$msgstr->db_err;	$list_cond = "";	$select_cond = "";	if(isUserAdmin($userid)) {		$list_cond = "where access_type = '1'";		$select_cond = ", department_list.department as department from address_group_main left outer join department_list on (address_group_main.department = department_list.department_id)";	} else {		$list_cond = "where (department='".pg_escape_string($department)."' or department='0') and access_type='1'";		$select_cond = ",department from address_group_main";	}	$sqlcmd = "select group_id, group_name" .$select_cond. " " .$list_cond. " order by group_name";	$result = pg_query($dbconn, $sqlcmd);	if(!$result)	{		echo $db_err. " (" .$sqlcmd. ") -- " .pg_last_error($dbconn);	} else {		for ($i=1; $row = pg_fetch_array($result); $i++){			$tmp_arr = array();			$tmp_arr2 = array();			$tmp_arr3 = array();						if(isUserAdmin($userid)) {				$getsql = "select contact_name, mobile_numb, email from address_book where group_string like '%".pg_escape_string($row['group_id'])."%'  and access_type='1' order by contact_name";			} else {				$getsql = "select contact_name, mobile_numb, email from address_book where group_string like '%".pg_escape_string($row['group_id'])."%' and (department='".pg_escape_string($department)."' or department='0') and access_type='1' order by contact_name";			}			$get = pg_query($dbconn, $getsql);			if(!is_string($get))			{				for ($j=0; $row2 = pg_fetch_array($get); $j++){					array_push($tmp_arr, trim($row2['contact_name']));					if($sendtype == 'both'){												array_push($tmp_arr2, trim($row2['mobile_numb']).'('.$row2['contact_name'].')');						if(trim($row2['email']) != ''){ array_push($tmp_arr3, trim($row2['email']).'('.$row2['contact_name'].')');}											} else {						if($ctype == 'email'){							if(trim($row2['email']) != ''){ array_push($tmp_arr2, trim($row2['email']).'('.$row2['contact_name'].')');}						} else {							array_push($tmp_arr2, trim($row2['mobile_numb']).'('.$row2['contact_name'].')');						}					}				}			}			$list = implode(", ", $tmp_arr);			$list2 = implode(",", $tmp_arr2);						if($sendtype == 'both'){				$list3 = implode(",", $tmp_arr3);				$list2 = $list2."|".$list3;			}												if($list == "") { $list = "------"; }			array_push($result_array,Array(				$i,				htmlspecialchars($row['group_name']),				htmlspecialchars($list),				(empty($row['department'])?'All Departments':htmlspecialchars($row['department'])),				'<input type="checkbox" name="selected" value="'.htmlspecialchars($list2).'">'			));		}		echo json_encode(Array("data"=>$result_array));	}}function listTemplate($userid){	global $dbconn, $lang;	$msgstr = GetLanguage("lib_send_sms",$lang);	$db_err = (string)$msgstr->db_err;	$sqlcmd = "select template_id, template_text from message_template where created_by='".pg_escape_string($userid)."' and access_type='0' order by template_text";	$row = getSQLresult($dbconn, $sqlcmd);	if(empty($row)) {		$row[0]['template_id'] = "0";		$row[0]['template_text'] = trim($msgstr->msg_tmp);	}		echo json_encode($row);}function listGlobalTemplate($userid, $department){	global $dbconn, $lang;	$msgstr = GetLanguage("lib_send_sms",$lang);	$db_err = (string)$msgstr->db_err;	if(isUserAdmin($userid)) {		$sqlcmd = "select template_id, template_text from message_template where access_type='1' order by template_text";	} else {		$sqlcmd = "select template_id, template_text from message_template where (department='".pg_escape_string($department)."' or department = '0') and access_type = '1' order by template_text";	}	$row = getSQLresult($dbconn, $sqlcmd);		if(empty($row)) {		$row[0]['template_id'] = "0";		$row[0]['template_text'] = trim($msgstr->msg_tmp);	}		echo json_encode($row);}function listMIMTemplate($userid){	global $dbconn, $lang;	$msgstr = GetLanguage("lib_send_sms",$lang);	$db_err = (string)$msgstr->db_err;	$sqlcmd = "select template_id, template_text from message_template where created_by='".pg_escape_string($userid)."' and access_type='2' order by template_text";	$row = getSQLresult($dbconn, $sqlcmd);	if(empty($row)) {		$row[0]['template_id'] = "0";		$row[0]['template_text'] = trim($msgstr->msg_tmp);	}		echo json_encode($row);}function getUnsubList(){	global $dbconn;	$sqlcmd = "select mobile_numb from unsubscribe_list order by unsubscribe_id";	$row = getSQLresult($dbconn, $sqlcmd);		if(is_string($row)) {		error_log("Database Error (".$sqlcmd.") -- ".pg_last_error($dbconn));		return;	} else {		return $row;	}}function matchNumb($target, $num){	if( strlen($target) == strlen($num) ){		if( $target == $num ){			return 1;		}	} else if ( strlen($num) < strlen($target) ){		$pos = strlen($target) - strlen($num);		$tmp = substr($target, $pos, strlen($num));		if( $num ==  $tmp ){			return 1;		}	} else if ( strlen($num) > strlen($target) ){		$pos = strlen($num) - strlen($target);		$tmp = substr($num, $pos, strlen($target));		if( $target == $tmp ){			return 1;		}	}	return 0;}function checkUnsubMobile($mobile_numb){	$unsub_list = getUnsubList();	$match = 0;		if( is_array( $unsub_list ) ){		if( count($unsub_list) >= 1 && isset($unsub_list[0]['mobile_numb'])){			foreach($unsub_list as $key){				$target = $key['mobile_numb'];				$match = matchNumb($target, $mobile_numb);				if($match == 1) {					return 1;				}			}		}	}	return 0;}function checkQuotaType($userid,$conn){	$sqlcmd = "select topup_frequency from quota_mnt where lower(userid)='".pg_escape_string($userid)."'";	$result = pg_query($conn,$sqlcmd);	$arr = pg_fetch_all($result);	return $arr[0]['topup_frequency'];}function checkQuotaUnlimited($userid, $dbconn){	$sqlcmd = "select unlimited_quota from quota_mnt where lower(userid)='".pg_escape_string($userid)."'";	$result = pg_query($dbconn, $sqlcmd);	$arr = pg_fetch_all($result);	return $arr[0]['unlimited_quota'];}function checkReservedQuota( $userid,$conn ){		#get reserved_quota	$reserved_quota = 0;	$sqlcmd = " select sum(reserved_quota) as reserved_quota from broadcast_sms_file where upload_by = '".dbSafe($userid)."'";	$result = pg_query($conn, $sqlcmd);	for ($i=1; $row = pg_fetch_array($result); $i++){		$reserved_quota = $row['reserved_quota'];	}		return $reserved_quota;}function checkQuota($userid,$conn){		$sqlcmd = "select quota_left from quota_mnt where lower(userid)='".pg_escape_string($userid)."'";	$result = pg_query($conn,$sqlcmd);	$arr = pg_fetch_all($result);	return $arr[0]['quota_left'];}function getLabel($department){	global $dbconn;	$sqlcmd = "select modem_label from modem_dept where dept='".pg_escape_string($department)."'";	$result = pg_query($dbconn,$sqlcmd);	$arr = pg_fetch_all($result);	return trim($arr[0]['modem_label']);}function validateMno($mno){		$mno = trim($mno);	$mno_len = strlen($mno);		if (!preg_match('/^[0-9]*$/', $mno)){//only digits		return "-1";	}	if(!($mno_len == 10 || $mno_len == 8)){		return "-1";	}	if($mno_len == 10){				if( substr($mno,0,2) == "658" || substr($mno,0,2) == "659" ){			return "+" . $mno;		}else{			return "-1";		}		/*		if(stripos($mno, "658") == 0 || stripos($mno, "659") == 0){			return "+" . $mno;		}else{			return "-1";		}		*/			}	if($mno_len == 8){				if( substr($mno,0,1) == "9" || substr($mno,0,1) == "8" ){			return "+" . $mno;		}else{			return "-1";		}				/*		if(stripos($mno, "9") == 0 || stripos($mno, "8") == 0){			return "+65" . $mno;		}else{			return "-1";		}		*/			}}function listTplParamElement( $tpl_id ){		global $dbconn;		$sqlcmd = "select template_text from message_template where template_id = '$tpl_id'";		$row = getSQLresult($dbconn, $sqlcmd);	$template_text = $row[0]['template_text'];	$break = false;		for ($x = 1; $x <= 20; $x++) {				$find_this = "data" . $x;				if (strpos( $template_text, $find_this ) !== false) {						//found param, continue			$returns['element'] .= '<textarea name = "'.$find_this.'" id = "'.$find_this.'" class = "form-control input-sm" row = "5">'.$find_this.'</textarea><br/>';					}else{			$break = true;		}				if( $break ){			break;		}			}		$returns['total'] = $x-1;	echo json_encode($returns);}?>